/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/zER0KamRIts
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useEffect, useState } from "react"
import { v4 as uuidv4 } from 'uuid';
import { Button } from "@/components/button"
import { supabase } from "@/lib//utils"

interface Task {
  id: string
  title: string
  description: string
  done: boolean
}

export function Todo() {
  const [tasks, setTasks] = useState<Task[]>([])
  const [viewMode, setViewMode] = useState("list")
  const [newTask, setNewTask] = useState({ title: '', description: '' })

  useEffect(() => {
    fetchTasks()
  }, [])

  async function fetchTasks() {
    const { data, error } = await supabase
      .from('tasks')
      .select('*')
    if (error) console.log('error', error)
    else setTasks(data)
  }

  const addTask = async (newTask: { title: string; description: string }) => {
    const task = { ...newTask, id: uuidv4(), done: false }
    const { data, error } = await supabase
      .from('tasks')
      .insert([task])
    if (error) console.log('error', error)
    else {
      setTasks([...tasks, task])
    }
  }

  const toggleTaskCompletion = async (id: string) => {
    const task = tasks.find(t => t.id === id)
    if (task) {
      const { data, error } = await supabase
        .from('tasks')
        .update({ done: !task.done })
        .eq('id', id)
      if (error) console.log('error', error)
      else {
        const updatedTasks = tasks.map((t) => (t.id === id ? { ...t, done: !t.done } : t))
        setTasks(updatedTasks)
      }
    }
  }

  const deleteTask = async (id: string) => {
    const { data, error } = await supabase
      .from('tasks')
      .delete()
      .eq('id', id)
    if (error) console.log('error', error)
    else {
      const updatedTasks = tasks.filter((task) => task.id !== id)
      setTasks(updatedTasks)
    }
  }

  const handleTaskCreation = () => {
    if (newTask.title.trim()) {
      addTask(newTask)
      setNewTask({ title: '', description: '' })
    }
  }

  const handleTaskCompletion = (id: string) => {
    toggleTaskCompletion(id)
  }

  const handleTaskDeletion = (id: string) => {
    deleteTask(id)
  }

  const toggleViewMode = () => {
    setViewMode(viewMode === "list" ? "tile" : "list")
  }

  return (
    <div className="bg-background">
      <div className="max-w-none p-6 bg-card rounded-lg shadow-lg">
        <h1 className="text-2xl font-bold mb-4 text-card-foreground">Todo App</h1>
        <div className="mb-4">
          <input
            type="text"
            placeholder="Task title"
            value={newTask.title}
            onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}
            className="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
          />
          <textarea
            placeholder="Task description"
            value={newTask.description}
            onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}
            className="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"
          />
          <Button
            onClick={handleTaskCreation}
            className="w-full mt-2 bg-primary text-primary-foreground hover:bg-primary/90"
          >
            Add Task
          </Button>
        </div>
        <div className="space-y-4">
          {tasks.map((task) => (
            <div
              key={task.id}
              className={`px-4 py-4 border rounded-md ${
                task.done ? "line-through text-muted-foreground" : "text-card-foreground"
              }`}
            >
              <div>
                <h3 className={`font-medium ${task.done ? "line-through" : ""}`}>{task.title}</h3>
                <p className="text-sm text-muted-foreground">{task.description}</p>
              </div>
              <div className="flex items-center gap-4 mt-2">
                <button
                  onClick={() => handleTaskCompletion(task.id)}
                  className={`px-4 py-2 rounded-md hover:bg-muted transition-colors ${
                    task.done ? "bg-muted text-muted-foreground" : "bg-primary text-primary-foreground"
                  }`}
                >
                  {task.done ? "Undo" : "Done"}
                </button>
                <button
                  onClick={() => handleTaskDeletion(task.id)}
                  className="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-colors"
                >
                  Delete
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}
